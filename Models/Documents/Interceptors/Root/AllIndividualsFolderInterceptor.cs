using NHibernate;
using RadialReview.Accessors;
using RadialReview.Models.Documents.Data;
using RadialReview.Models.Documents.Interceptors.Data;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RadialReview.Models.Documents.Interceptors.Root {
  public class AllIndividualsFolderInterceptor : IDocumentFolderInterceptor_Unsafe {
    public async Task<List<DocumentItemVM>> GeneratedDocumentItems(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      return new List<DocumentItemVM>();
    }

    public async Task OnBeforeLoad(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {

      UserModel userAlias = null;
      var users = s.QueryOver<UserOrganizationModel>()
        .JoinAlias(x => x.User, () => userAlias)
        .Where(x => x.Organization.Id == folder.OrgId && x.DeleteTime == null)
        .Where(x => x.User != null)
        .List().GroupBy(x => x.User.Id)
        .ToList();
      //.Select(x => x.User.Id, x => x.User.FirstName, x => x.User.LastName, x => x.UserName, x => x.User.ImageGuid, x => x.Id)
      //.List<object[]>()
      //.Select(x => new {
      //	UserModelId = (string)x[0],
      //	FirstName = (string)x[1],
      //	LastName = (string)x[2],
      //	Email = (string)x[3],
      //	ImageGuid = (string)x[4],
      //}).Distinct(x => x.UserModelId)

      var subfolders = s.QueryOver<DocumentsFolder>()
                .WithSubquery.WhereProperty(x => x.Id)
                .In(DocumentsAccessor.Criterions.GetItemIdsInFolder(folder.Id, DocumentItemType.DocumentFolder))
                .List().ToList();


      var personalFolderData = subfolders.Where(x => FolderConsts.PersonalFolder.ClassMatches(x)).ToList();

      var addRemove = SetUtility.AddRemove(
                personalFolderData, x => x.GetInterceptorData<PersonalFolderData>().UserModelId,
                users, x => x.Key
      );

      var now = DateTime.UtcNow;
      foreach (var addedGroup in addRemove.AddedValues) {
        var added = addedGroup.First();
        var name = added.GetName();
        if (string.IsNullOrWhiteSpace(name)) {
          continue;
        }
        var data = new PersonalFolderData() {
          OrgId = folder.OrgId,
          UserModelId = addedGroup.Key
        };

        var f = DocumentsFolder.CreateFrom(name + " Personal Documents", "<span class='docs-icon docs-icon-personal'></span>", folder.OrgId, null, false, FolderConsts.PersonalFolder, data);
        s.Save(f);

        await DocumentsAccessor._SaveLink_Unsafe(s, caller, folder, f, folder.OrgId, false);
        //var link = DocumentItemLocation.CreateFrom(folder, f);
        //s.Save(link);

        var perms = addedGroup.Select(x => PermTiny.UserModelAtOrganization(addedGroup.Key, folder.OrgId)).ToArray();
        PermissionsAccessor.InitializePermItemsAutoGenerated_Unsafe(s, folder.OrgId, PermItem.ResourceType.DocumentsFolder, f.Id, perms);
      }

    }
    public async Task OnAfterLoad(DocumentsFolderVM folderVM) {
      //noop
    }

    public bool ShouldExecute(ISession s, DocumentsFolder folder) {
      return FolderConsts.IndividualsFolder.InterceptorMatches(folder);
    }

    public async Task OnAfterLink(ISession s, UserOrganizationModel caller, DocumentsFolder folder, DocumentItemLocation location) {
      //noop
    }

    public async Task OnAfterUnlink(ISession s, UserOrganizationModel caller, DocumentsFolder fromFolder, DocumentItemLocation location) {
      //noop
    }
  }
}
using NHibernate;
using RadialReview.Accessors;
using RadialReview.Models.Documents.Interceptors.Data;
using RadialReview.Variables;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace RadialReview.Models.Documents.Interceptors {
  public class RootCompanyTeamDocumentsInterceptor : IDocumentFolderInterceptor_Unsafe {

    public async Task<List<DocumentItemVM>> GeneratedDocumentItems(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      return new List<DocumentItemVM>();
    }

    public async Task OnBeforeLoad(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      if (!folder.GetInterceptorProperty("WasGenerated", false)) {
        var gen = s.GetSettingOrDefault(Variable.Names.FOLDER_ROOTCOMPANYTEAM, () => new List<GS> {
            GS.Folder("Core Processes", null,"Process"),
            GS.Folder("Training Documents", null,"Training"),
            GS.Folder("Archive", null,"Archive")
          });

        folder.SetInterceptorProperty("WasGenerated", true);
        s.Update(folder);
        var data = folder.GetInterceptorData<MeetingFolderData>();
        foreach (var g in gen) {
          var f = DocumentsFolder.CreateFrom(g, folder.OrgId, new MeetingFolderData() { OrgId = data.OrgId, RecurrenceId = data.RecurrenceId });
          s.Save(f);

          await DocumentsAccessor._SaveLink_Unsafe(s, caller, folder, f, folder.OrgId, false);
          //var link = DocumentItemLocation.CreateFrom(folder, f);
          //s.Save(link);
          PermissionsAccessor.InitializePermItemsAutoGenerated_Unsafe(s, folder.OrgId, PermItem.ResourceType.DocumentsFolder, f.Id, PermTiny.InheritedFrom(PermItem.ResourceType.DocumentsFolder, folder.Id));
        }
      }
    }
    public async Task OnAfterLoad(DocumentsFolderVM folderVM) {
      //noop
    }
    public bool ShouldExecute(ISession s, DocumentsFolder folder) {
      return FolderConsts.RootCompanyTeamDocumentsFolder.InterceptorMatches(folder);
    }
    public async Task OnAfterLink(ISession s, UserOrganizationModel caller, DocumentsFolder folder, DocumentItemLocation location) {
      //noop
    }
    public async Task OnAfterUnlink(ISession s, UserOrganizationModel caller, DocumentsFolder fromFolder, DocumentItemLocation location) {
      //noop
    }
  }
}
using NHibernate;
using RadialReview.Accessors;
using RadialReview.Models.Documents.Interceptors.Data;
using RadialReview.Models.L10;
using RadialReview.Utilities;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RadialReview.Models.Documents.Interceptors {
  public class MeetingsListingFolderInterceptor : IDocumentFolderInterceptor_Unsafe {

    public bool ShouldExecute(ISession s, DocumentsFolder folder) {
      return FolderConsts.MeetingListingFolder.InterceptorMatches(folder);
    }

    public async Task OnBeforeLoad(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {

      var recurs = s.QueryOver<L10Recurrence>()
        .Where(x => x.Organization.Id == folder.OrgId && x.DeleteTime == null)
        .List().ToList();

      var subfolders = s.QueryOver<DocumentsFolder>()
                .WithSubquery.WhereProperty(x => x.Id)
                .In(DocumentsAccessor.Criterions.GetItemIdsInFolder(folder.Id, DocumentItemType.DocumentFolder))
                .List().ToList();

      var meetingFolderData = subfolders.Where(x => FolderConsts.MeetingFolder.ClassMatches(x)).ToList();

      var addRemove = SetUtility.AddRemove(
                meetingFolderData, x => x.GetInterceptorData<MeetingFolderData>().RecurrenceId,
                recurs, x => x.Id
              );

      foreach (var added in addRemove.AddedValues) {
        var f = new DocumentsFolder() {
          CreateTime = added.CreateTime,
          CreatorId = added.CreatedById,
          Generated = true,
          LookupId = RandomUtil.SecureRandomString(),
          Name = added.Name,
          IconHint = added.MeetingType == MeetingType.L10 ? "" : "SPM",
          OrgId = added.OrganizationId,
          Class = FolderConsts.MeetingFolder.Class,
          Interceptor = FolderConsts.MeetingFolder.Interceptor,
          HueRotate = 180,
          Root = false,
          CanDelete = false,
        };
        f.SetInterceptorData(new MeetingFolderData() { RecurrenceId = added.Id, OrgId = folder.OrgId });
        s.Save(f);

        await DocumentsAccessor._SaveLink_Unsafe(s, caller, folder, f, folder.OrgId, false);
        //var link = DocumentItemLocation.CreateFrom(folder, f);
        //s.Save(link);

        //var creator = s.Get<UserOrganizationModel>(added.CreatedById);
        PermissionsAccessor.InitializePermItemsAutoGenerated_Unsafe(s, folder.OrgId, PermItem.ResourceType.DocumentsFolder, f.Id, PermTiny.InheritedFromL10Recurrence(added.Id));
      }

      foreach (var removed in addRemove.RemovedValues) {
        var found = s.Get<L10Recurrence>(removed.GetInterceptorData<MeetingFolderData>().RecurrenceId);
        removed.DeleteTime = found.DeleteTime;
        s.Update(removed);
      }

    }
    public async Task OnAfterLoad(DocumentsFolderVM folderVM) {
      //noop
    }


    public async Task<List<DocumentItemVM>> GeneratedDocumentItems(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      return new List<DocumentItemVM>();
    }

    public async Task OnAfterLink(ISession s, UserOrganizationModel caller, DocumentsFolder folder, DocumentItemLocation location) {
      //noop
    }
    public async Task OnAfterUnlink(ISession s, UserOrganizationModel caller, DocumentsFolder fromFolder, DocumentItemLocation location) {
      //noop
    }
  }
}
using NHibernate;
using RadialReview.Accessors;
using RadialReview.Core.Accessors;
using RadialReview.Core.Models.Terms;
using RadialReview.Models.Documents.Data;
using RadialReview.Models.Documents.Interceptors.Data;
using RadialReview.Utilities;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RadialReview.Models.Documents.Interceptors.Root.TractionTools.PeopleTools {
  public class PeopleToolsInterceptor : IDocumentFolderInterceptor_Unsafe {
    public async Task<List<DocumentItemVM>> GeneratedDocumentItems(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      var output = new List<DocumentItemVM>();

      //Add People Analyzer
      var allUsersAtOrg = this.GetMyUserIdAtOrganization(s, caller, folder.OrgId);
      var terms = TermsAccessor.GetTermsCollection(s, PermissionsUtility.Create(s, caller), folder.OrgId);

      foreach (var user in allUsersAtOrg) {
        var name = terms.GetTerm(TermKey.RightPersonRightSeat);
        if (allUsersAtOrg.Count > 1) {
          name += " (" + user.Cache.Positions + ")";
        }
        output.Add(DocumentItemVM.CreateApplicationLink(name, "/People/PeopleAnalyzer?userId=" + user.Id, "PA", new DocumentItemSettings(folder)));
      }
      return output;
    }

    public async Task OnBeforeLoad(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      //noop
      var subfolders = s.QueryOver<DocumentsFolder>()
                .WithSubquery.WhereProperty(x => x.Id)
                .In(DocumentsAccessor.Criterions.GetItemIdsInFolder(folder.Id, DocumentItemType.DocumentFolder))
                .List().ToList();
      UserModel userAlias = null;
      var users = s.QueryOver<UserOrganizationModel>()
        .JoinAlias(x => x.User, () => userAlias)
        .Where(x => x.Organization.Id == folder.OrgId && x.DeleteTime == null)
        .Where(x => x.User != null)
        .List().GroupBy(x => x.User.Id)
        .ToList();

      var personalFolderData = subfolders.Where(x => FolderConsts.PeopleToolsManagerFolder.ClassMatches(x)).ToList();
      var addRemove = SetUtility.AddRemove(
                personalFolderData, x => x.GetInterceptorData<PeopleToolsManagerFolderData>().UserModelId,
                users, x => x.Key
              );

      var terms = TermsAccessor.GetTermsCollection_Unsafe(s, folder.OrgId);
      var now = DateTime.UtcNow;
      foreach (var addedGroup in addRemove.AddedValues) {
        var added = addedGroup.First();
        var name = added.GetName();
        if (string.IsNullOrWhiteSpace(name)) {
          continue;
        }
        var data = new PersonalFolderData() {
          OrgId = folder.OrgId,
          UserModelId = addedGroup.Key
        };
        terms.GetTerm(TermKey.RightPersonRightSeat);
        var f = DocumentsFolder.CreateFrom(terms.GetTerm(TermKey.Quarterly1_1)+" Results for " + name, null, folder.OrgId, null, false, FolderConsts.PeopleToolsManagerFolder, data);
        s.Save(f);
        //var link = DocumentItemLocation.CreateFrom(folder, f);    // I'm assuming this is obsolete and should not be here anymore? 
        //s.Save(link);

        var perms = addedGroup.Select(x => PermTiny.UserModelAtOrganization(addedGroup.Key, folder.OrgId)).ToArray();
        PermissionsAccessor.InitializePermItemsAutoGenerated_Unsafe(s, folder.OrgId, PermItem.ResourceType.DocumentsFolder, f.Id, perms);
      }

    }

    public async Task OnAfterLoad(DocumentsFolderVM folderVM)
    {
      //noop
    }

    public bool ShouldExecute(ISession s, DocumentsFolder folder) {
      return FolderConsts.PeopleToolsFolder.InterceptorMatches(folder);
    }

    public async Task OnAfterLink(ISession s, UserOrganizationModel caller, DocumentsFolder folder, DocumentItemLocation location)
    {
      //noop
    }
    public async Task OnAfterUnlink(ISession s, UserOrganizationModel caller, DocumentsFolder fromFolder, DocumentItemLocation location)
    {
      //noop
    }

  }
}
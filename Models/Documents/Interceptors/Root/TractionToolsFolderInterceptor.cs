using NHibernate;
using RadialReview.Accessors;
using RadialReview.Core.Accessors;
using RadialReview.Core.Models.Terms;
using RadialReview.Models.Documents.Interceptors.Data;
using RadialReview.Utilities;
using RadialReview.Variables;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RadialReview.Models.Documents.Interceptors {
  public class TractionToolsFolderInterceptor : IDocumentFolderInterceptor_Unsafe {
    public bool ShouldExecute(ISession s, DocumentsFolder folder) {
      return FolderConsts.TractionToolsFolder.InterceptorMatches(folder);
    }

    public async Task OnBeforeLoad(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      var gen = s.GetSettingOrDefault(Variable.Names.FOLDER_TRACTIONTOOLS, () => new List<GS> {
            GS.AutoPopFolder("Meetings", FolderConsts.MeetingListingFolder, "Weekly Meeting",null,false),
            GS.AutoPopFolder("People Tools", FolderConsts.PeopleToolsFolder, "People", null,false)
          });

      var subfolders = s.QueryOver<DocumentsFolder>()
                .WithSubquery.WhereProperty(x => x.Id)
                .In(DocumentsAccessor.Criterions.GetItemIdsInFolder(folder.Id, DocumentItemType.DocumentFolder))
                .List().ToList();

      var matchingSubfolders = subfolders.Where(x => gen.Any(g => g.Class == x.Class)).ToList();
      var addRemove = SetUtility.AddRemove(matchingSubfolders, x => x.Class, gen, x => x.Class);

      var companyName = s.Get<OrganizationModel>(folder.OrgId).GetName();

      var now = DateTime.UtcNow;
      foreach (var added in addRemove.AddedValues) {
        var f = DocumentsFolder.CreateFrom(added, folder.OrgId, new BaseFolderData() { OrgId = folder.OrgId }, companyName);
        s.Save(f);

        await DocumentsAccessor._SaveLink_Unsafe(s, caller, folder, f, folder.OrgId, false);
        //var link = DocumentItemLocation.CreateFrom(folder, f);
        //s.Save(link);
        PermissionsAccessor.InitializePermItemsAutoGenerated_Unsafe(s, folder.OrgId, PermItem.ResourceType.DocumentsFolder, f.Id, PermTiny.InheritedFrom(PermItem.ResourceType.DocumentsFolder, folder.Id));
      }
    }

    public async Task OnAfterLoad(DocumentsFolderVM folderVM) {
      //noop
    }


    public async Task<List<DocumentItemVM>> GeneratedDocumentItems(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {

      var items = new List<DocumentItemVM>();
      var org = s.Get<OrganizationModel>(folder.OrgId);
      var terms = TermsAccessor.GetTermsCollection(s, PermissionsUtility.Create(s, caller), folder.OrgId);

      //Add VTO
      var perms = PermissionsUtility.Create(s, caller);
      try {
        var shared = VtoAccessor.GetSharedVTO(s, perms, folder.OrgId);
        if (shared != null) {
          items.Add(DocumentItemVM.CreateLink(new DocumentItemLinkSettings() {
            CreateTime = shared.CreateTime,
            Description = "Company " + terms.GetTerm(TermKey.BusinessPlan),
            IconHint = "",
            Name = shared.Name + " " + terms.GetTerm(TermKey.BusinessPlan) ?? "Company " + terms.GetTerm(TermKey.BusinessPlan),
            Url = "/Vto/Edit/" + shared.Id,
            Generated = false,
            CanDelete = false
          }, new DocumentItemSettings(folder)));
        }
      } catch (Exception e) {
        //not allowed.
      }

      //Add Organizational Chart
      if (perms.IsPermitted(x => x.ViewHierarchy(org.AccountabilityChartId))) {
        items.Add(DocumentItemVM.CreateApplicationLink(
          org.GetName() + " " + terms.GetTerm(TermKey.OrganizationalChart),
          "/Accountability/Chart/" + org.AccountabilityChartId,
          "", new DocumentItemSettings(folder))
        );
      }

      return items;
    }


    public async Task OnAfterLink(ISession s, UserOrganizationModel caller, DocumentsFolder folder, DocumentItemLocation location) {
      //noop
    }
    public async Task OnAfterUnlink(ISession s, UserOrganizationModel caller, DocumentsFolder fromFolder, DocumentItemLocation location) {
      //noop
    }
  }
}


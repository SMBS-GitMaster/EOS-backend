using NHibernate;
using RadialReview.Accessors;
using RadialReview.Models.Documents.Interceptors.Data;
using RadialReview.Models.Downloads;
using RadialReview.Models.Enums;
using RadialReview.Variables;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace RadialReview.Models.Documents.Interceptors {
  public class RootFolderInterceptor : IDocumentFolderInterceptor_Unsafe {
    public bool ShouldExecute(ISession s, DocumentsFolder folder) {
      return FolderConsts.RootFolder.InterceptorMatches(folder);
    }

    //Notice.. when a coach is added, this method is unsafely called on the coaches client to establish the folder.


    public async Task OnBeforeLoad(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      var gen = s.GetSettingOrDefault(Variable.Names.FOLDER_ROOT, () => new List<GS> {
            GS.AutoPopFolder("{0} Documents", FolderConsts.RootCompanyDocumentsFolder, null, null, false),
            GS.AutoPopFolder("Bloom Growth Documents", FolderConsts.TractionToolsFolder, null, null, false),
            GS.AutoPopFolder("Individuals", FolderConsts.IndividualsFolder, "<span class='docs-icon docs-icon-allindividuals'></span>", null, false),
            GS.AutoPopFolder("Shared", FolderConsts.SharedFolder, null, null, false),
            GS.AutoPopFolder("My Coaching Tools", FolderConsts.CoachTemplateFolder, "<span class='docs-icon docs-icon-coachfolder'></span>", null, false),
            GS.AutoPopFolder("Coach Tools", FolderConsts.CoachClientFolder, "<span class='docs-icon docs-icon-coachfolder'></span>", null, false),
      });

      var subfolders = s.QueryOver<DocumentsFolder>()
                .WithSubquery.WhereProperty(x => x.Id)
                .In(DocumentsAccessor.Criterions.GetItemIdsInFolder(folder.Id, DocumentItemType.DocumentFolder))
                .List().ToList();

      var org = s.Get<OrganizationModel>(folder.OrgId);
      if (!org.AccountType.IsImplementerOrCoach()) {
        //remove generator for Shared Client Tools
        gen.RemoveAll(x => x.Class == FolderConsts.CoachTemplateFolder.Class);
      }
      var coaches = s.QueryOver<CoachOrg>().Where(x => x.OrgId == folder.OrgId && x.DeleteTime == null).RowCount();

      if (coaches==0) {
        //remove generator for Coach Template folder
        gen.RemoveAll(x => x.Class == FolderConsts.CoachClientFolder.Class);
      }


      var matchingSubfolders = subfolders.Where(x => gen.Any(g => g.Class == x.Class)).ToList();
      var addRemove = SetUtility.AddRemove(matchingSubfolders, x => x.Class, gen, x => x.Class);

      var companyName = s.Get<OrganizationModel>(folder.OrgId).GetName();

      var now = DateTime.UtcNow;
      foreach (var added in addRemove.AddedValues) {
        var f = DocumentsFolder.CreateFrom(added, folder.OrgId, new BaseFolderData() { OrgId = folder.OrgId }, companyName);
        if (FolderConsts.RootCompanyDocumentsFolder.ClassMatches(f)) {
          var letter = "";
          if (companyName.Trim().Length > 0) {
            letter = ("" + companyName.First()).ToUpperInvariant();

          }
          f.IconHint = "<span class='docs-icon docs-icon-letter'>" + letter + "</span>";
        }

        s.Save(f);

        await DocumentsAccessor._SaveLink_Unsafe(s, caller, folder, f, folder.OrgId, false);
        //var link = DocumentItemLocation.CreateFrom(folder, f);
        //s.Save(link);

        var perms = new[] { PermTiny.InheritedFrom(PermItem.ResourceType.DocumentsFolder, folder.Id) };
        if (FolderConsts.IndividualsFolder.ClassMatches(added)) {
          //disable admin access for the personal folder.
          perms = new[] {
            PermTiny.InheritedFrom(PermItem.ResourceType.DocumentsFolder, folder.Id, true, true, false),
            PermTiny.System()
          };
        }

        if (FolderConsts.CoachClientFolder.ClassMatches(added)) {
          perms = new[] {
            PermTiny.Admins(true, true, true), //Coach is an admin
            PermTiny.System()
          };
          org.CoachDocumentsFolderId = f.Id;
          s.Update(org);
        }

        if (FolderConsts.CoachTemplateFolder.ClassMatches(added)) {
          org.CoachTemplateDocumentsFolderId = f.Id;
          s.Update(org);
        }

        PermissionsAccessor.InitializePermItemsAutoGenerated_Unsafe(s, folder.OrgId, PermItem.ResourceType.DocumentsFolder, f.Id, perms);
      }
    }
    public async Task OnAfterLoad(DocumentsFolderVM folderVM) {
      //noop
    }



    public async Task<List<DocumentItemVM>> GeneratedDocumentItems(ISession s, UserOrganizationModel caller, DocumentsFolder folder) {
      var items = new List<DocumentItemVM>();
      return items;
    }

    public async Task OnAfterLink(ISession s, UserOrganizationModel caller, DocumentsFolder folder, DocumentItemLocation location) {
      //noop
    }
    public async Task OnAfterUnlink(ISession s, UserOrganizationModel caller, DocumentsFolder fromFolder, DocumentItemLocation location) {
      //noop
    }
  }
}


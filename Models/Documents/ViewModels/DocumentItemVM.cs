using RadialReview.Models.Documents.Enums;
using RadialReview.Models.Downloads;
using RadialReview.Models.VTO;
using System;
using System.Collections.Generic;
using System.Linq;
using RadialReview.Utilities.FileTypes;

namespace RadialReview.Models.Documents {
  public class DocumentItemVM {
    private string _outerClass;
    public string Id { get; set; }
    public TinyDocumentItem TinyItem { get; set; }
    public DocumentItemType Type { get { return TinyItem.ItemType; } }
    public string OuterClass { get => _outerClass ?? GetOuterCssClass(Type); set => _outerClass = value; }
    private string _iconClass;
    public string IconClass { get => _iconClass ?? GetItemIconCssClass(Type); set => _iconClass = value; }
    public string Name { get; set; }
    public string IconHint { get; set; }
    public string Extension { get; set; }
    public string Url { get; set; }
    public long Size { get; set; }
    public int? HueRotation { get; set; }
    public string Description { get; set; }
    public string ImageUrl { get; set; }
    public DateTime? CreateTime { get; set; }
    public DateTime? LastModified { get; set; }
    public bool IsMainFolder { get; set; }
    public bool IsShortcut { get; set; }
    public long? ParentFolderId { get; set; }
    public string ParentfolderName { get; set; }
    public bool? CanDelete { get; set; }
    public bool CanAdmin { get; set; }
    public bool CanEdit { get; set; }
    public List<string> HeadingGroupNames { get; set; }
    public string Metadata { get; set; }

    public DocumentItemWindowTarget Target { get; set; }
    public List<DocumentItemMenuItemVM> Menu { get; set; }
    public bool Generated { get; set; }
    public string GetPreviewContainerStyleAttribute() {
      var builder = new List<string>();
      if (HueRotation != null) {
        builder.Add("filter:hue-rotation(" + HueRotation + "deg)");
      }

      if (builder.Any())
        return "style='" + string.Join(";", builder) + "'";
      return "";
    }

    public string GetExtensionCssClass() {
      var found = FileTypeExtensionUtility.GetFileTypeFromExtension(Extension);
      if (found.Known) {
        return "docs-icon-file-" + found.Extension;
      }

      return "docs-icon-file-unknown";
    }

    private DocumentItemVM() {
      Menu = new List<DocumentItemMenuItemVM>();
      HeadingGroupNames = new List<string>();
    }

    public bool IsFolder() {
      return TinyItem.ItemType == DocumentItemType.DocumentFolder;
    }

    public static DocumentItemVM Create(DocumentsFolder f, bool isMainFolder, DocumentItemSettings settings) {
      return new DocumentItemVM {
        Id = f.LookupId,
        CreateTime = f.CreateTime,
        Name = f.Name,
        ImageUrl = f.ImageUrl,
        TinyItem = new TinyDocumentItem(f.Id, DocumentItemType.DocumentFolder),
        IsMainFolder = isMainFolder,
        ParentFolderId = settings.ParentFolderId,
        ParentfolderName = settings.ParentFolderName,
        CanAdmin = settings.CanAdmin ?? false,
        CanEdit = settings.CanEdit ?? false,
        Url = "/documents/folder/" + f.LookupId,
        IconHint = f.IconHint,
        Description = f.Description,
        HueRotation = f.HueRotate,
        Size = 0,
        CanDelete = (settings.CanDelete ?? true) && f.CanDelete,
        Generated = f.Generated,
      };
    }

    public static DocumentItemVM Create(EncryptedFileModel f, DocumentItemSettings settings) {
      return new DocumentItemVM { Id = "" + f.Id, CreateTime = f.CreateTime, Name = f.FileName, TinyItem = new TinyDocumentItem(f.Id, DocumentItemType.EncryptedFile), ParentFolderId = settings.ParentFolderId, ParentfolderName = settings.ParentFolderName, CanAdmin = settings.CanAdmin ?? false, CanEdit = settings.CanEdit ?? false, Url = "/documents/inline/" + f.Id, Description = f.FileDescription, Extension = f.FileType, IsMainFolder = false, HueRotation = GetHueRotation(f.FileType), IconHint = GetIconHint(f.FileType), Target = DocumentItemWindowTarget.NewWindow, Size = f.Size, LastModified = f.CreateTime, CanDelete = settings.CanDelete, Generated = f.FileOrigin == FileOrigin.AutoGenerated, };
    }

    public static DocumentItemVM Create(WhiteboardModel f, DocumentItemSettings settings) {
      return new DocumentItemVM { Id = f.LookupId, CreateTime = f.CreateTime, Name = f.Name, TinyItem = new TinyDocumentItem(f.Id, DocumentItemType.Whiteboard), IsMainFolder = false, ParentFolderId = settings.ParentFolderId, ParentfolderName = settings.ParentFolderName, CanAdmin = settings.CanAdmin ?? false, CanEdit = settings.CanEdit ?? false, IconHint = f.IconHint, Description = f.Description, Url = "/whiteboard/edit/" + f.LookupId, Target = DocumentItemWindowTarget.NewWindow, Size = 0, LastModified = f.LastDiffTime ?? f.CreateTime, CanDelete = settings.CanDelete, Generated = false, };
    }

    public static DocumentItemVM Create(VtoModel f, DocumentItemSettings settings) {
      return new DocumentItemVM { Id = "" + f.Id, CreateTime = f.CreateTime, Name = f.Name, TinyItem = new TinyDocumentItem(f.Id, DocumentItemType.VTO), IsMainFolder = false, ParentFolderId = settings.ParentFolderId, ParentfolderName = settings.ParentFolderName, CanAdmin = settings.CanAdmin ?? false, CanEdit = settings.CanEdit ?? false, IconHint = "", Description = "Business Plan for " + f.Name, Url = "/VTO/Edit/" + f.Id, Target = DocumentItemWindowTarget.NewWindow, Size = 0, LastModified = f.LastModified ?? f.CreateTime, CanDelete = settings.CanDelete, Generated = false, };
    }

    public static DocumentItemVM CreateLink(DocumentItemLinkSettings link, DocumentItemSettings settings) {
      return new DocumentItemVM {
        Id = null,
        CreateTime = link.CreateTime,
        Name = link.Name,
        TinyItem = new TinyDocumentItem(-1, DocumentItemType.Link).SetForceViewable(link.ForceViewable),
        IsMainFolder = false,
        ParentFolderId = settings.ParentFolderId,
        ParentfolderName = settings.ParentFolderName,
        CanAdmin = settings.CanAdmin ?? false,
        CanEdit = settings.CanEdit ?? false,
        Url = link.Url,
        IconHint = link.IconHint,
        Description = link.Description,
        Target = link.Target ?? DocumentItemWindowTarget.NewWindow,
        Size = 0,
        ImageUrl = link.ImageUrl,
        CanDelete = (settings.CanDelete ?? true) && link.CanDelete,
        Generated = link.Generated,
      };
    }

    public static DocumentItemVM CreateApplicationLink(string name, string url, string iconHint, DocumentItemSettings settings) {
      var res = CreateLink(new DocumentItemLinkSettings() { CreateTime = null, Name = name, Url = url, Target = DocumentItemWindowTarget.NewWindow, Generated = true, IconHint = iconHint, CanDelete = false, }, settings);
      res.IconClass = "docs-icon-application";
      res.OuterClass = "docs-application";
      return res;
    }

    public static int? GetHueRotation(string extension) {
      if (string.IsNullOrWhiteSpace(extension))
        return 0;
      var rot = extension.GetHashCode() % 336;
      if (rot > 230)
        rot += 24;
      return rot;
    }

    public static string GetIconHint(string extension) {
      if (string.IsNullOrWhiteSpace(extension) || extension.Length >= 6)
        return "";
      return extension.Replace(".", "").ToUpper();
    }

    public static string GetOuterCssClass(DocumentItemType type) {
      switch (type) {
        case DocumentItemType.Invalid:
          return "docs-file";
        case DocumentItemType.EncryptedFile:
          return "docs-file";
        case DocumentItemType.DocumentFolder:
          return "docs-folder";
        case DocumentItemType.Link:
          return "docs-link";
        case DocumentItemType.Process:
          return "docs-process";
        case DocumentItemType.Whiteboard:
          return "docs-whiteboard";
        case DocumentItemType.VTO:
          return "docs-vto";
        default:
          break;
      }

      return "docs-" + type.ToString().ToLower();
    }

    public static string GetItemIconCssClass(DocumentItemType type) {
      switch (type) {
        case DocumentItemType.Invalid:
          return "docs-icon-file";
        case DocumentItemType.EncryptedFile:
          return "docs-icon-file";
        case DocumentItemType.DocumentFolder:
          return "docs-icon-folder";
        case DocumentItemType.Link:
          return "docs-icon-link";
        case DocumentItemType.Process:
          return "docs-icon-file";
        case DocumentItemType.Whiteboard:
          return "docs-icon-whiteboard";
        case DocumentItemType.VTO:
          return "docs-icon-vto";
        default:
          break;
      }

      return "docs-icon-" + type.ToString().ToLower();
    }
  }
}

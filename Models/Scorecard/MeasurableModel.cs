using System;
using System.Runtime.Serialization;
using FluentNHibernate.Mapping;
using RadialReview.Models.Enums;
using RadialReview.Models.Interfaces;
using System.Linq;
using RadialReview.Core.Models.Scorecard;
using Newtonsoft.Json.Linq;
using System.Collections.Generic;
using RadialReview.Models.L10;
using CommonMark.Syntax;
using NHibernate.Envers.Configuration.Attributes;

// Test change to check if I can push tot this repo
namespace RadialReview.Models.Scorecard
{
  [DataContract]
  public class MeasurableModel : BaseModel, ILongIdentifiable, IDeletable
  {
    [DataMember]
    public virtual long Id { get; set; }
    [DataMember]
    public virtual string Title { get; set; }
    [DataMember]
    public virtual LessGreater GoalDirection { get; set; }
    [DataMember]
    public virtual decimal? Goal { get; set; }
    [DataMember]
    public virtual UnitType UnitType { get; set; }
    [DataMember(Name = "AccountableUser")]
    public virtual UserOrganizationModel.DataContract DataContract_AccountableUser { get { return AccountableUser.NotNull(x => x.GetUserDataContract()); } }
    [DataMember(Name = "AdminUser")]
    public virtual UserOrganizationModel.DataContract DataContract_AdminUser { get { return AdminUser.NotNull(x => x.GetUserDataContract()); } }

    public virtual long? FromTemplateItemId { get; set; }
    public virtual long AccountableUserId { get; set; }
    public virtual UserOrganizationModel AccountableUser { get; set; }
    public virtual long AdminUserId { get; set; }
    public virtual UserOrganizationModel AdminUser { get; set; }
    public virtual decimal? AlternateGoal { get; set; }
    public virtual long OrganizationId { get; set; }
    public virtual OrganizationModel Organization { get; set; }
    public virtual DateTime NextGeneration { get; set; }
    public virtual DateTime CreateTime { get; set; }
    public virtual DateTime? DeleteTime { get; set; }
    public virtual string NotesId { get; set; }

    public virtual bool HasV3Config { get; set; }

    public virtual bool? _IsAutogenerated { get; set; }

    public virtual Frequency Frequency { get; set; }

    public virtual string Formula { get; set; }
    [Obsolete("use BackReferenceMeasurables")]
    public virtual string _BackReferenceMeasurablesStr { get; set; }

    public virtual IList<ScoreModel> Scores { get; set; }

    /// <summary>
    /// When this one updates, also update these measurables...
    /// </summary>
    public virtual long[] BackReferenceMeasurables
    {
      get
      {
        if (string.IsNullOrWhiteSpace(_BackReferenceMeasurablesStr))
          return new long[] { };
        return _BackReferenceMeasurablesStr.Split('~').Select(x => long.Parse(x)).ToArray();
      }
      set
      {
        _BackReferenceMeasurablesStr = string.Join("~", value);
      }
    }

    public virtual DayOfWeek DueDate { get; set; }
    public virtual TimeSpan DueTime { get; set; }

    public virtual DateTime? CumulativeRange { get; set; }
    public virtual DateTime? AverageRange { get; set; }

    public virtual bool ShowCumulative { get; set; }
    public virtual bool ShowAverage { get; set; }

    public virtual DateTime? ProgressiveDate { get; set; }

    public virtual IList<MetricCustomGoal> CustomGoals { get; set; }
    public virtual decimal? _Progressive { get; set; }
    public virtual decimal? _Cumulative { get; set; }
    public virtual decimal? _Average { get; set; }


    public virtual bool _Editable { get; set; }
    public virtual int? _Ordering { get; set; }
    public virtual long? _Grouping { get; set; }
    public virtual string _GroupingName { get; set; }


    public virtual bool Archived { get; set; }
    public virtual bool HasFormula { get { return !string.IsNullOrWhiteSpace(Formula); } }

    public MeasurableModel()
    {
      _Editable = true;
      CreateTime = DateTime.UtcNow;
      CumulativeRange = DateTime.UtcNow;
      NextGeneration = CreateTime - TimeSpan.FromDays(7);
      DueDate = DayOfWeek.Friday;
      CustomGoals = new List<MetricCustomGoal>();
    }

    public MeasurableModel(OrganizationModel forOrganization) : this()
    {
      var now = DateTime.UtcNow;
      CreateTime = now;
      NextGeneration = now - TimeSpan.FromDays(7);
      DueDate = DayOfWeek.Friday;

      DueTime = forOrganization.ConvertToUTC(TimeSpan.FromHours(12));

      Organization = forOrganization;
      OrganizationId = forOrganization.Id;
    }

    public class MeasurableMap : BaseModelClassMap<MeasurableModel>
    {
      public MeasurableMap()
      {
        Id(x => x.Id);
        References(x => x.AccountableUser).Column("AccountableUserId").LazyLoad().ReadOnly();
        Map(x => x.AccountableUserId).Column("AccountableUserId");
        References(x => x.AdminUser).Column("AdminUserId").LazyLoad().ReadOnly();
        Map(x => x.AdminUserId).Column("AdminUserId");
        Map(x => x.AlternateGoal);
        Map(x => x.Archived);
        Map(x => x.AverageRange);
        Map(x => x.CreateTime);
        Map(x => x.CumulativeRange);
        HasMany(x => x.CustomGoals).KeyColumn("MeasurableId").Cascade.SaveUpdate();
        Map(x => x.DeleteTime);
        Map(x => x.DueDate);
        Map(x => x.DueTime);
        Map(x => x.Formula).Length(800);
        Map(x => x.FromTemplateItemId);
        Map(x => x.Frequency);
        Map(x => x.Goal);
        Map(x => x.GoalDirection);
        Map(x => x.HasV3Config);
        Map(x => x.NextGeneration);
        Map(x => x.NotesId);
        Map(x => x.OrganizationId).Column("OrganizationId");
        References(x => x.Organization).Column("OrganizationId").LazyLoad().ReadOnly();
        Map(x => x.ProgressiveDate);
        Map(x => x.ShowCumulative);
        Map(x => x.ShowAverage);
        Map(x => x.Title);
        Map(x => x.UnitType);
        Map(x => x._BackReferenceMeasurablesStr).Length(800);

        HasMany(x => x.Scores)
          .KeyColumn("MeasureableId")
          .Inverse()
          .Cascade.All()
          .LazyLoad();
      }
    }
  }
}